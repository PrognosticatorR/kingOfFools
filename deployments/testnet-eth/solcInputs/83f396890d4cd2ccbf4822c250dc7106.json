{
  "language": "Solidity",
  "sources": {
    "contracts/KingOfFools.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\nimport { IERC20 } from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ncontract KingOfFools {\n\t//keeps track of tokenSymbol => previousDepositor\n\tmapping(bytes32 => address) internal previousDepositor;\n\n\taddress public owner;\n\taddress public kingOfFools;\n\n\tevent TokenTransfer(address receiver, uint256 amount);\n\n\tconstructor() {\n\t\towner = msg.sender;\n\t}\n\n\tfunction getContractBalance() external view returns (uint256 balance) {\n\t\treturn address(this).balance;\n\t}\n\n\treceive() external payable {\n\t\trequire(\n\t\t\tmsg.value >= (((address(this).balance - msg.value) * 150) / 100) ||\n\t\t\t\tpreviousDepositor[bytes32(\"ETH\")] == address(0),\n\t\t\t\"KingOfFools: insuffcient value!\"\n\t\t);\n\n\t\tif (previousDepositor[bytes32(\"ETH\")] != address(0)) {\n\t\t\t(bool success, ) = previousDepositor[bytes32(\"ETH\")].call{ value: msg.value }(\"\");\n\t\t\trequire(success, \"KingOfFools: transfer to winner failed\");\n\t\t\tkingOfFools = msg.sender;\n\t\t}\n\t\tpreviousDepositor[bytes32(\"ETH\")] = msg.sender;\n\t}\n\n\t// todo\n\t// implement the erc20 token deposite function\n\t// so this be able to recieve erc20 tokens if thoes are whitelisted contracts\n\n\t// //keeps track of all whitelisted tokens to use in this contract\n\t// mapping(bytes32 => address) public whitelistedTokens;\n\n\t// //keeps track of tokenSymbol => amountStoredForContract\n\t// mapping(bytes32 => uint256) internal tokenAmounts;\n\n\t// error InsufficientAmount(uint256 amount);\n\t// error InsufficientFund();\n\n\t// function addToWhitelist(bytes32 _symbol, address _contractAddress) external {\n\t// \trequire(msg.sender == owner, \"KingOfFools: only owner!\");\n\t// \twhitelistedTokens[_symbol] = _contractAddress;\n\t// }\n\n\t// function depositeToken(uint256 _amount, bytes32 _symbol) external returns (bool) {\n\t// \tif ((_amount < (tokenAmounts[_symbol] * 150) / 100) || _amount == 0) {\n\t// \t\trevert InsufficientAmount(_amount);\n\t// \t}\n\t// \trequire(whitelistedTokens[_symbol] != address(0), \"KingOfFools: token is not whitelisted\");\n\t// \tIERC20(whitelistedTokens[_symbol]).transferFrom(msg.sender, address(this), _amount);\n\t// \tif (previousDepositor[_symbol] != address(0)) {\n\t// \t\t_transferAmount(_amount, _symbol, previousDepositor[_symbol]);\n\t// \t\tkingOfFools = msg.sender;\n\t// \t\temit TokenTransfer(previousDepositor[_symbol], _amount);\n\t// \t}\n\t// \tif (tokenAmounts[_symbol] == 0) {\n\t// \t\ttokenAmounts[_symbol] = _amount;\n\t// \t}\n\t// \tpreviousDepositor[_symbol] = msg.sender;\n\t// \treturn true;\n\t// }\n\n\t// function _transferAmount(\n\t// \tuint256 _amount,\n\t// \tbytes32 _symbol,\n\t// \taddress _receiver\n\t// ) private {\n\t// \tif (_amount > tokenAmounts[_symbol]) {\n\t// \t\trevert InsufficientFund();\n\t// \t}\n\t// \tIERC20(whitelistedTokens[_symbol]).transfer(_receiver, _amount);\n\t// }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}